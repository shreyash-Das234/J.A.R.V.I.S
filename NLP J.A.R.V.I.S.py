# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1smVOZjg-792-hA3GR4lmN8dBteC5jMsE
"""

import speech_recognition as sr
import pyttsx3
import os
import webbrowser as wb
import datetime
import random
import numpy as np
import pywhatkit
import pygame
import subprocess as sp
import pyautogui
from nltk.sentiment import SentimentIntensityAnalyzer
import pyjokes

# Initialize the speech engine
engine = pyttsx3.init()

# Function to speak to the user
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function for speech recognition
def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio).lower()
        print("You said: " + command)
    except sr.UnknownValueError:
        print("Sorry, I couldn't understand that.")
        command = listen()  # If speech is not recognized, keep listening
    return command

# Function for opening websites
def open_website(query):
    if 'youtube' in query:
        wb.open('https://www.youtube.com')
    elif 'google' in query:
        wb.open('https://www.google.com')
    elif 'facebook' in query:
        wb.open('https://www.facebook.com')
    elif 'twitter' in query:
        wb.open('https://www.twitter.com')
    else:
        speak("Website not found, opening Google.")
        wb.open('https://www.google.com')

# Function to tell the time
def tell_time():
    time = datetime.datetime.now().strftime("%H:%M:%S")
    speak(f"The current time is {time}")

# Function to tell a joke
def tell_joke():
    joke = pyjokes.get_joke()
    speak(joke)

# Function to play music on YouTube
def play_music(query):
    song = query.replace("play", "")
    speak(f"Playing {song} on YouTube.")
    pywhatkit.playonyt(song)

# Function to perform sentiment analysis
def analyze_sentiment(text):
    sid = SentimentIntensityAnalyzer()
    sentiment = sid.polarity_scores(text)
    if sentiment['compound'] >= 0.05:
        return "Positive"
    elif sentiment['compound'] <= -0.05:
        return "Negative"
    else:
        return "Neutral"

# Function to control system volume (simplified)
def adjust_volume(command):
    if 'increase' in command:
        speak("Increasing volume")
        # Increase volume logic here (can be adjusted by integrating system volume control)
    elif 'decrease' in command:
        speak("Decreasing volume")
        # Decrease volume logic here
    else:
        speak("No volume control command detected")

# Main function for J.A.R.V.I.S to run continuously and listen for commands
def jarvis():
    speak("Hello, I am J.A.R.V.I.S. How can I assist you today?")

    while True:
        command = listen()

        # Command-based functionalities
        if 'time' in command:
            tell_time()
        elif 'open' in command:
            open_website(command)
        elif 'play' in command:
            play_music(command)
        elif 'joke' in command:
            tell_joke()
        elif 'analyze' in command:
            speak("Please tell me the sentence you'd like to analyze.")
            text = listen()
            sentiment = analyze_sentiment(text)
            speak(f"The sentiment is {sentiment}.")
        elif 'volume' in command:
            adjust_volume(command)
        elif 'exit' in command or 'quit' in command:
            speak("Goodbye! Have a great day!")
            break
        else:
            speak("Sorry, I didn't understand that. Can you repeat?")

# Start the assistant
if __name__ == "__main__":
    jarvis()